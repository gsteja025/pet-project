// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: linkedin.proto

package petproject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkedinDatabaseCrudClient is the client API for LinkedinDatabaseCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkedinDatabaseCrudClient interface {
	Createpost(ctx context.Context, in *NewPost, opts ...grpc.CallOption) (*Post, error)
	ConnectedUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error)
	AllCommentsOfPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Comments, error)
	AllUsersWhoLikedspecificPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Users, error)
	ConnectWithOtherUser(ctx context.Context, in *TwoUsers, opts ...grpc.CallOption) (*Emptyresponse, error)
	LikeOtherPosts(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Emptyresponse, error)
	SearchForRequiredUserBasedOnTechStack(ctx context.Context, in *Technology, opts ...grpc.CallOption) (*Users, error)
}

type linkedinDatabaseCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkedinDatabaseCrudClient(cc grpc.ClientConnInterface) LinkedinDatabaseCrudClient {
	return &linkedinDatabaseCrudClient{cc}
}

func (c *linkedinDatabaseCrudClient) Createpost(ctx context.Context, in *NewPost, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/petproject.LinkedinDatabaseCrud/Createpost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedinDatabaseCrudClient) ConnectedUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/petproject.LinkedinDatabaseCrud/ConnectedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedinDatabaseCrudClient) AllCommentsOfPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := c.cc.Invoke(ctx, "/petproject.LinkedinDatabaseCrud/AllCommentsOfPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedinDatabaseCrudClient) AllUsersWhoLikedspecificPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/petproject.LinkedinDatabaseCrud/AllUsersWhoLikedspecificPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedinDatabaseCrudClient) ConnectWithOtherUser(ctx context.Context, in *TwoUsers, opts ...grpc.CallOption) (*Emptyresponse, error) {
	out := new(Emptyresponse)
	err := c.cc.Invoke(ctx, "/petproject.LinkedinDatabaseCrud/ConnectWithOtherUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedinDatabaseCrudClient) LikeOtherPosts(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Emptyresponse, error) {
	out := new(Emptyresponse)
	err := c.cc.Invoke(ctx, "/petproject.LinkedinDatabaseCrud/LikeOtherPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedinDatabaseCrudClient) SearchForRequiredUserBasedOnTechStack(ctx context.Context, in *Technology, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/petproject.LinkedinDatabaseCrud/SearchForRequiredUserBasedOnTechStack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkedinDatabaseCrudServer is the server API for LinkedinDatabaseCrud service.
// All implementations must embed UnimplementedLinkedinDatabaseCrudServer
// for forward compatibility
type LinkedinDatabaseCrudServer interface {
	Createpost(context.Context, *NewPost) (*Post, error)
	ConnectedUsers(context.Context, *User) (*Users, error)
	AllCommentsOfPost(context.Context, *Post) (*Comments, error)
	AllUsersWhoLikedspecificPost(context.Context, *Post) (*Users, error)
	ConnectWithOtherUser(context.Context, *TwoUsers) (*Emptyresponse, error)
	LikeOtherPosts(context.Context, *Post) (*Emptyresponse, error)
	SearchForRequiredUserBasedOnTechStack(context.Context, *Technology) (*Users, error)
	mustEmbedUnimplementedLinkedinDatabaseCrudServer()
}

// UnimplementedLinkedinDatabaseCrudServer must be embedded to have forward compatible implementations.
type UnimplementedLinkedinDatabaseCrudServer struct {
}

func (UnimplementedLinkedinDatabaseCrudServer) Createpost(context.Context, *NewPost) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createpost not implemented")
}
func (UnimplementedLinkedinDatabaseCrudServer) ConnectedUsers(context.Context, *User) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectedUsers not implemented")
}
func (UnimplementedLinkedinDatabaseCrudServer) AllCommentsOfPost(context.Context, *Post) (*Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCommentsOfPost not implemented")
}
func (UnimplementedLinkedinDatabaseCrudServer) AllUsersWhoLikedspecificPost(context.Context, *Post) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUsersWhoLikedspecificPost not implemented")
}
func (UnimplementedLinkedinDatabaseCrudServer) ConnectWithOtherUser(context.Context, *TwoUsers) (*Emptyresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectWithOtherUser not implemented")
}
func (UnimplementedLinkedinDatabaseCrudServer) LikeOtherPosts(context.Context, *Post) (*Emptyresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeOtherPosts not implemented")
}
func (UnimplementedLinkedinDatabaseCrudServer) SearchForRequiredUserBasedOnTechStack(context.Context, *Technology) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForRequiredUserBasedOnTechStack not implemented")
}
func (UnimplementedLinkedinDatabaseCrudServer) mustEmbedUnimplementedLinkedinDatabaseCrudServer() {}

// UnsafeLinkedinDatabaseCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkedinDatabaseCrudServer will
// result in compilation errors.
type UnsafeLinkedinDatabaseCrudServer interface {
	mustEmbedUnimplementedLinkedinDatabaseCrudServer()
}

func RegisterLinkedinDatabaseCrudServer(s grpc.ServiceRegistrar, srv LinkedinDatabaseCrudServer) {
	s.RegisterService(&LinkedinDatabaseCrud_ServiceDesc, srv)
}

func _LinkedinDatabaseCrud_Createpost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedinDatabaseCrudServer).Createpost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petproject.LinkedinDatabaseCrud/Createpost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedinDatabaseCrudServer).Createpost(ctx, req.(*NewPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedinDatabaseCrud_ConnectedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedinDatabaseCrudServer).ConnectedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petproject.LinkedinDatabaseCrud/ConnectedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedinDatabaseCrudServer).ConnectedUsers(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedinDatabaseCrud_AllCommentsOfPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedinDatabaseCrudServer).AllCommentsOfPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petproject.LinkedinDatabaseCrud/AllCommentsOfPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedinDatabaseCrudServer).AllCommentsOfPost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedinDatabaseCrud_AllUsersWhoLikedspecificPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedinDatabaseCrudServer).AllUsersWhoLikedspecificPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petproject.LinkedinDatabaseCrud/AllUsersWhoLikedspecificPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedinDatabaseCrudServer).AllUsersWhoLikedspecificPost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedinDatabaseCrud_ConnectWithOtherUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedinDatabaseCrudServer).ConnectWithOtherUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petproject.LinkedinDatabaseCrud/ConnectWithOtherUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedinDatabaseCrudServer).ConnectWithOtherUser(ctx, req.(*TwoUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedinDatabaseCrud_LikeOtherPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedinDatabaseCrudServer).LikeOtherPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petproject.LinkedinDatabaseCrud/LikeOtherPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedinDatabaseCrudServer).LikeOtherPosts(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedinDatabaseCrud_SearchForRequiredUserBasedOnTechStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Technology)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedinDatabaseCrudServer).SearchForRequiredUserBasedOnTechStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petproject.LinkedinDatabaseCrud/SearchForRequiredUserBasedOnTechStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedinDatabaseCrudServer).SearchForRequiredUserBasedOnTechStack(ctx, req.(*Technology))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkedinDatabaseCrud_ServiceDesc is the grpc.ServiceDesc for LinkedinDatabaseCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkedinDatabaseCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petproject.LinkedinDatabaseCrud",
	HandlerType: (*LinkedinDatabaseCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Createpost",
			Handler:    _LinkedinDatabaseCrud_Createpost_Handler,
		},
		{
			MethodName: "ConnectedUsers",
			Handler:    _LinkedinDatabaseCrud_ConnectedUsers_Handler,
		},
		{
			MethodName: "AllCommentsOfPost",
			Handler:    _LinkedinDatabaseCrud_AllCommentsOfPost_Handler,
		},
		{
			MethodName: "AllUsersWhoLikedspecificPost",
			Handler:    _LinkedinDatabaseCrud_AllUsersWhoLikedspecificPost_Handler,
		},
		{
			MethodName: "ConnectWithOtherUser",
			Handler:    _LinkedinDatabaseCrud_ConnectWithOtherUser_Handler,
		},
		{
			MethodName: "LikeOtherPosts",
			Handler:    _LinkedinDatabaseCrud_LikeOtherPosts_Handler,
		},
		{
			MethodName: "SearchForRequiredUserBasedOnTechStack",
			Handler:    _LinkedinDatabaseCrud_SearchForRequiredUserBasedOnTechStack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "linkedin.proto",
}
